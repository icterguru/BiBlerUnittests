# Python source code generated by SCC (StateChart Compiler) 0.3, written by Thomas Feng
#     Source: BiBler_Statechart.des
#     Date:     March 20, 2005
#     Time:     23:11:50

import time

class BiBler_Statechart(object):

    def __init__(self, Interpreter=None, Parent=None, OldInstance=None):
        self.Parent=Parent
        self.Interpreter = Interpreter
        self.state = ''
    
    def initModel(self):
        pass
    
    def exit(self):
        pass
    
    def statusBar(self, scheduler):
        scheduler.updateStatusBar()
        time.sleep(.75)
        scheduler.clearStatusBar()

    def event(self, e, scheduler=None):
        if e == 'start':
            self.state = 'start'
        elif e == 'exitClicked':
            scheduler.popupConfirmExitDialog()
            self.state = 'exit'
        elif e == 'openClicked':
            scheduler.popupOpenDialog()
            self.state = 'open'
        elif e == 'openFileSelected':
            scheduler.openFile()
            scheduler.displayEntries()
            scheduler.clearEditor()
            scheduler.clearPreviewer()
            scheduler.unselectEntryRow()
            scheduler.updateStatusTotal()
            self.state = 'openComplete'
            scheduler.setStatusMsg('Total: ' + str(scheduler.getEntryCount()))
            self.statusBar(scheduler)
        elif e == 'saveClicked':
            if scheduler.isBibtexFileLoaded():
                self.event('saveFileSelected', scheduler)
            else:
                self.event('saveAsClicked', scheduler)
            self.state = 'save'
        elif e == 'saveAsClicked':
            scheduler.popupSaveDialog()
            self.state = 'save as'
        elif e == 'saveFileSelected':
            scheduler.saveFile()
            scheduler.setStatusMsg('Bibliography saved.')
            self.statusBar(scheduler)
            scheduler.unsetDirtyTitle()
            self.state = 'saveComplete'
        elif e == 'importClicked':
            scheduler.popupImportDialog()
            self.state = 'import'
        elif e == 'importFileSelected':
            scheduler.importFile()
            scheduler.displayEntries()
            scheduler.clearEditor()
            scheduler.clearPreviewer()
            scheduler.unselectEntryRow()
            scheduler.updateStatusTotal()
            self.state = 'importComplete'
            scheduler.setStatusMsg('Imported complete. Total: ' + str(scheduler.getEntryCount()))
            self.statusBar(scheduler)
        elif e == 'exportClicked':
            scheduler.popupExportDialog()
            self.state = 'export'
        elif e == 'exportFileSelected':
            scheduler.exportFile()
            scheduler.setStatusMsg('Export complete.')
            self.statusBar(scheduler)
            self.state = 'exportComplete'
        elif e == 'addClicked':
            scheduler.addEntry()
            scheduler.addNewEntryRow()
            scheduler.selectCurrentEntryRow()
            scheduler.setDirtyTitle()
            scheduler.updateStatusTotal()
            self.state = 'add'
        elif e == 'entrySelected':
            scheduler.getBibTeX()
            scheduler.displayBibTexInEditor()
            scheduler.previewEntry()
            scheduler.previewEntryHTML()
            scheduler.enableDelete()
            scheduler.enableDuplicate()
            self.state = 'select'
        elif e == 'entryDeselected':
            scheduler.clearEditor()
            scheduler.clearPreviewer()
            scheduler.disableDelete()
            scheduler.disableDuplicate()
            self.state = 'idle'
        elif e == 'entryDoubleClicked':
            scheduler.getEntryPaperURL()
            if scheduler.currentEntryHasPaper():
                scheduler.openEntryPaper()
            self.state = 'openPaper'
        elif e == 'textChangedInEditor':
            scheduler.enableUpdateButton()
            self.state = 'editorTextChanged'
        elif e == 'updatedButtonClicked':
            scheduler.disableUpdateButton()
            scheduler.updateEntry()
            scheduler.updateSelectedEntryRow()
            scheduler.getBibTeX()
            scheduler.displayBibTexInEditor()
            scheduler.previewEntry()
            scheduler.previewEntryHTML()
            scheduler.setDirtyTitle()
            self.state = 'update'
        elif e == 'deleteClicked':
            scheduler.deleteEntry()
            scheduler.removeEntryRow()
            scheduler.clearEditor()
            scheduler.clearPreviewer()
            scheduler.unselectEntryRow()
            scheduler.setDirtyTitle()
            scheduler.updateStatusTotal()
            self.state = 'delete'
        elif e == 'duplicateClicked':
            scheduler.duplicateEntry()
            scheduler.addNewEntryRow()
            scheduler.selectCurrentEntryRow()
            scheduler.setDirtyTitle()
            scheduler.updateStatusTotal()
            self.state = 'duplicateComplete'
        elif e == 'searchClicked':
            scheduler.popupSearchDialog()
            self.state = 'search'
        elif e == 'filterClicked':
            scheduler.search()
            if (scheduler.getEntryCount() > 0):
                scheduler.enableClearFilter()
                scheduler.displayEntries()
                scheduler.unselectEntryRow()
            scheduler.setStatusMsg(str(scheduler.getEntryCount()) + ' results found')
            self.statusBar(scheduler)
            scheduler.updateStatusTotal()
            self.state = 'searchComplete'
        elif e == 'clearFilterClicked':
            scheduler.disableClearFilter()
            scheduler.getAllEntries()
            scheduler.displayEntries()
            scheduler.clearEditor()
            scheduler.clearPreviewer()
            scheduler.unselectEntryRow()
            scheduler.updateStatusTotal()
        elif e == 'preferencesClicked':
            scheduler.popupPreferencesDialog()
            self.state = 'preferences'
        elif e == 'preferencesChanged':
            if scheduler.isEntrySelected():
                scheduler.previewEntry()
                scheduler.previewEntryHTML()
            self.state = 'preferencesComplete'
        elif e == 'aboutClicked':
            scheduler.popupAboutDialog()
            self.state = 'about'
        elif e == 'manualClicked':
            scheduler.popupUserManualWindow()
            self.state = 'manual'
        elif e == 'colClicked':
            scheduler.sort()
            scheduler.getAllEntries()
            scheduler.displayEntries()
            scheduler.unselectEntryRow()
            scheduler.setDirtyTitle()
            self.state = 'colClicked'
        elif e == 'cancelClicked':
            self.state = 'idle'
        elif e == 'error':
            scheduler.popupErrorMessage()
        else:
            self.state = 'idle'
        print self.state
